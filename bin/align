#!/usr/bin/env perl
use warnings;
use strict;
use utf8;

#------------------------------------------------------------------------------
use File::Basename qw(basename);
our $PROGNAME = basename($0);

#------------------------------------------------------------------------------
use open IO => qw(:locale);
use Encode::Locale;
use Encode qw(decode);
BEGIN {
    @ARGV = map { decode('locale', $_, Encode::FB_CROAK) } @ARGV;
}

#------------------------------------------------------------------------------
our @patterns;
our $verbose = 0;
our $debug = 0;

my $align = My::Align->new();

#------------------------------------------------------------------------------
use Getopt::Long;
Getopt::Long::Configure('bundling', 'gnu_compat', 'no_ignore_case');
Getopt::Long::GetOptions(
    'e|pattern=s'     => sub { $align->addPattern($_[1]); },
    'r|repeat'        => sub { $align->repeat(1); },
    'F|fixed-strings' => sub { $align->matcher('fixed-strings'); },
    'P|perl-regexp'   => sub { $align->matcher('perl-regexp'); },
    'b|before'        => sub { $align->alignBefore(1); },
    'a|after'         => sub { $align->alignBefore(0); },
    'v|verbose+'      => \$verbose,
    'debug+'          => \$debug,
    'h|help'          => sub { usage(); exit(0); },
) or die("Type '$PROGNAME --help' for help.\n");

sub usage { print(<<"END"); }
usage:
    $PROGNAME [<option> ...] [<filename> ...]
options:
    -e, --pattern=<pattern>
    -r, --repeat
    -F, --fixed-strings
    -P, --perl-regexp
    -v, --verbose
        --debug
    -h, --help
END

if (!scalar @patterns) {
    if (!scalar @ARGV) {
        die("$PROGNAME: pattern must be specified\n");
    }
    my $pattern = shift(@ARGV);
    $align->addPattern($pattern);
}

$align->verbose($verbose);
$align->debug($debug);
while (<>) {
    $align->addLine($_);
    if ($verbose) {
        warn("Read $. lines\n");
    }
}
$align->printAlignedLines();

#------------------------------------------------------------------------------

=head1 NAME

align - align columns of text by pattern

=head1 SYNOPSIS

    align [<option> ...] <pattern> [<filename> ...]
    align [<option> ...] -e <pattern> -e <pattern> ... [<filename> ...]

Options:

    -r, --repeat
    -P, --perl-regexp
    -F, --fixed-strings
    -e, --pattern=<pattern>

=head1 DESCRIPTION

This program lines up its input text by one or more patterns.

    $ cat 1.txt
    John Jacob@Jingleheimerschmidt@5300
    John@Doe@1200
    Janet@Smith@900

    $ align '@' 1.txt
    John Jacob @ Jingleheimerschmidt@5300
    John       @ Doe@1200
    Janet      @ Smith@900

Patterns can be repeated:

    $ align -r @ 1.txt
    John Jacob @ Jingleheimerschmidt @ 5300
    John       @ Doe                 @ 1200
    Janet      @ Smith               @ 900

This program takes its input from standard input or from the contents
of one or more files whose names are specified on the command line.

While doing so, it expands tabs, assuming they're 8 spaces wide.

=head1 OPTIONS

=over 4

=item -r, --repeat

Repeat any pattern(s) specified.

=item -P, --perl-regexp

Interpret any subsequently specified pattern(s) as Perl regular
expressions.

=item -F, --fixed-strings

Interpret any subsequently specified pattern(s) as fixed strings.

=item -e, --pattern=<pattern>

To specify multiple patterns, specify this option with an argument
once or more.

=back

=head1 BUGS

=head1 AUTHOR

Darren Embry

=head1 COPYRIGHT

Copyright 2020 Darren Embry.  Use and distribute under the same terms
as Perl itself.

=cut

#------------------------------------------------------------------------------
package My::Align {
    use Text::Tabs qw(expand);
    use List::Util qw(max);
    use Moo;
    INIT {
        has patterns     => (is => 'rw', default => sub { return []; });
        has lines        => (is => 'rw', default => sub { return []; });
        has repeat       => (is => 'rw', default => 0);
        has spacesBefore => (is => 'rw', default => 1); # -B, --spaces-before
        has spacesAfter  => (is => 'rw', default => 1); # -A, --spaces-after
        has alignBefore  => (is => 'rw', default => 1); # -b, --align-before; -a, --align-after
        has verbose      => (is => 'rw', default => 0);
        has debug        => (is => 'rw', default => 0);
        has matcher      => (is => 'rw', default => 'fixed-strings');
    }
    sub addPattern {
        my ($self, $pattern) = @_;
        push(@{$self->patterns}, {
            regexp => $self->createRegexp($pattern),
        });
    }
    sub createRegexp {
        my ($self, $pattern) = @_;
        if ($self->matcher eq 'perl-regexp') {
            return qr{$pattern};
        }
        return qr{\Q$pattern\E};
    }
    sub addLine {
        my ($self, $text) = @_;
        $text =~ s{\R\z}{};     # safer chomp
        $text = expand($text);
        push(@{$self->lines}, {
            text => $text,
            filename => $ARGV,
            number => $.,
        });
    }
    sub printAlignedLines {
        my ($self) = @_;
        $self->initLines();
        if ($self->repeat) {
            while (1) {
                if (!$self->runPatterns()) {
                    last;
                }
            }
        } else {
            $self->runPatterns();
        }
        $self->finalizeLines();
        $self->printLines();
    }
    sub initLines {
        my ($self) = @_;
        foreach my $line (@{$self->lines}) {
            $line->{result} = '';
            delete $line->{match};
            delete $line->{post};
            $line->{buffer} = $line->{text};
        }
    }
    sub finalizeLines {
        my ($self) = @_;
    }
    sub runPatterns {
        my ($self) = @_;
        my $match = 0;
        foreach my $pattern (@{$self->patterns}) {
            if ($self->runPattern($pattern)) {
                $match = 1;
            }
        }
        return $match;
    }
    sub runPattern {
        my ($self, $pattern) = @_;
        my $regexp = $pattern->{regexp};
        my $match = 0;
        if ($self->verbose) {
            warn("Running pattern [$regexp]\n");
        }
        foreach my $line (@{$self->lines}) {
            if ($line->{buffer} =~ $regexp) {
                my ($pre, $match, $post) = ($`, $&, $');
                $line->{pre} = $pre;
                $line->{result} .= $pre;
                $line->{match} = $match;
                $line->{post} = $post;
            } else {
                $line->{pre} = undef;
                $line->{match} = undef;
                $line->{post} = $line->{buffer};
            }
        }
        my @matchingLines = grep { defined $_->{match} } @{$self->lines};
        if ($self->verbose) {
            warn(sprintf("  %d lines match\n", scalar @matchingLines));
        }
        if (!scalar @matchingLines) {
            foreach my $line (@{$self->lines}) {
                delete $line->{match};
                delete $line->{buffer};
                $line->{result} .= $line->{post};
                delete $line->{post};
            }
            return 0;
        }
        $self->trimLinesAtEnd(@matchingLines);
        if ($self->alignBefore) {
            $self->padLines(@matchingLines);
            if ($self->spacesBefore) {
                $self->appendSpaces($self->spacesBefore, @matchingLines);
            }
        }
        foreach my $line (@matchingLines) {
            $line->{result} .= $line->{match};
            $line->{buffer} = $line->{post};
            delete $line->{match};
            delete $line->{post};
        }
        $self->trimLinesAtEnd(@matchingLines);
        $self->padLines(@matchingLines);
        if ($self->spacesAfter) {
            $self->appendSpaces($self->spacesAfter, @matchingLines);
        }
        $self->trimBuffersAtStart(@matchingLines);
        return 1;
    }
    sub trimLinesAtEnd {
        my ($self, @lines) = @_;
        foreach my $line (@lines) {
            $line->{result} =~ s{\s+$}{};
        }
    }
    sub trimBuffersAtStart {
        my ($self, @lines) = @_;
        foreach my $line (@lines) {
            $line->{buffer} =~ s{^\s+}{};
        }
    }
    sub appendSpaces {
        my ($self, $numSpaces, @lines) = @_;
        my $hasContents = scalar grep { m{\S} } map { $_->{result} } @lines;
        if ($hasContents) {
            foreach my $line (@lines) {
                $line->{result} .= ' ' x $numSpaces;
            }
        }
    }
    sub padLines {
        my ($self, @lines) = @_;
        my $maxLength = max map { length $_->{result} } @lines;
        foreach my $line (@lines) {
            my $length = length $line->{result};
            my $numSpaces = $maxLength - $length;
            $line->{result} .= ' ' x $numSpaces;
        }
    }
    sub printLines {
        my ($self) = @_;
        foreach my $line (@{$self->lines}) {
            my $text = $line->{result} . ($line->{buffer} // '');
            $text =~ s{\s+$}{};
            print "$text\n";
        }
    }
};
